# COMMANDS:
# docker-compose -f docker/docker-compose.yaml --env-file .env up: start all the services defined in your compose.yaml file
# docker-compose -f docker/docker-compose.yaml --env-file .env down: stop and remove the running services
# docker-compose -f docker/docker-compose.yaml --env-file .env logs: monitor the output of your running containers and debug issues, viewing logs
# docker-compose -f docker/docker-compose.yaml --env-file .env ps: lists all the services along with their current status

# version: "3.8"

services:

  # App Service
  app:
    image: ${DOCKERHUB_USERNAME}/${DOCKERHUB_REPOSITORY}:${ENV}-image-${VERSION}
    container_name: ${ENV}_app_container_${VERSION}

    command:
      - python
      - app.py

    environment:
      - KXY_API_KEY=${KXY_API_KEY}

      - DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
      - DOCKERHUB_REPOSITORY=${DOCKERHUB_REPOSITORY}
      - DOCKERHUB_TOKEN=${DOCKERHUB_TOKEN}

      - RAW_DATASETS_PATH=${RAW_DATASETS_PATH}
      - TRAINING_PATH=${TRAINING_PATH}
      - INFERENCE_PATH=${INFERENCE_PATH}
      - TRANSFORMERS_PATH=${TRANSFORMERS_PATH}
      - MODELS_PATH=${MODELS_PATH}
      - SCHEMAS_PATH=${SCHEMAS_PATH}
      - MOCK_PATH=${MOCK_PATH}

      - SEED=${SEED}

    ports:
      - "${INFERENCE_PORT}:${INFERENCE_PORT}"

    volumes:
      - ../${BUCKET}:/app/${BUCKET}
      - ../config:/app/config
    
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
    #   interval: 10s
    #   retries: 5
    #   start_period: 30s
    #   timeout: 10s

  # Streamlit Web App Service
  # frontend:

  # # Dummy service
  # dummy-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     args:
  #       - ARG_KEY=${ARG_VALUE}

  #   image: ${USERNAME}/${REPO_NAME}:${ENV}-image-${VERSION} # latest
  #   container_name: ${ENV}_container_name_${VERSION}

  #   command: # Overwrite the CMD commands specified in the Dockerfile
  #     - python
  #     - app.py

  #   environment:
  #     - ENV_KEY=${ENV_VALUE}

  #   ports:
  #     - "8000:8000"

  #   volumes:
  #     # - ${HOST_PATH}:/app # Mount the project directory
  #     - ../${BUCKET}:/app/${BUCKET}
  #     - ../config:/app/config

  #   deploy:
  #     replicas: 3
  #     update_config:
  #       parallelism: 2
  #       delay: 10s
  #     resources:
  #       limits:
  #         cpus: "0.5"
  #         memory: "512M"

  #   depends_on:
  #     dependence-service:
  #       condition: service_completed_successfully

volumes:
  datasets:
    labels:
      environment: "development"